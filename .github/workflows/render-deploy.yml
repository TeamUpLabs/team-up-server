name: CI & Deploy FastAPI to Render

on:
  push:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Python
        uses: actions/setup-python@v6
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests
        env:
          DATABASE_URL: "sqlite:///./test.db"
        run: |
          pytest tests/ --maxfail=1 --disable-warnings -q

  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    permissions:
      deployments: write
      contents: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        
      - name: Create GitHub Deployment
        id: deployment
        uses: actions/github-script@v7
        with:
          script: |
            const { data: deployment } = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              auto_merge: false,
              required_contexts: [],
              environment: 'Production',
              transient_environment: false,
              production_environment: true
            });
            
            return deployment.id;
          
      - name: Install jq
        run: |
          sudo apt-get update
          sudo apt-get install -y jq
          # Trigger deploy and capture the response
          DEPLOY_RESPONSE=$(curl -X POST "https://api.render.com/deploy/${{ secrets.RENDER_SERVICE_ID }}?key=${{ secrets.RENDER_API_KEY }}" \
            -H "Accept: application/json" \
            -H "Content-Type: application/json" \
            --silent)
          
          echo "Deploy response: $DEPLOY_RESPONSE"
          
          # Extract deploy ID from response (assuming it returns JSON with 'id' field)
          DEPLOY_ID=$(echo $DEPLOY_RESPONSE | jq -r '.id // empty' 2>/dev/null || echo "")
          
          if [ -z "$DEPLOY_ID" ]; then
            echo "Failed to get deploy ID from response"
            echo "Full response: $DEPLOY_RESPONSE"
            exit 1
          fi
          
          echo "Deploy ID: $DEPLOY_ID"
          echo "deploy_id=$DEPLOY_ID" >> $GITHUB_OUTPUT
          echo "DEPLOY_ID=$DEPLOY_ID" >> $GITHUB_ENV
      - name: Wait for Render Deploy to Complete
        run: |
          # Wait for deploy to complete
          MAX_ATTEMPTS=60
          ATTEMPT=0
          
          while [ $ATTEMPT -lt $MAX_ATTEMPTS ]; do
            echo "Checking deploy status (attempt $((ATTEMPT + 1))/$MAX_ATTEMPTS)..."
            
            # Get deploy status using the API provided by user
            STATUS_RESPONSE=$(curl --request GET \
              --url "https://api.render.com/v1/services/${{ secrets.RENDER_SERVICE_ID }}/deploys/$DEPLOY_ID" \
              --header 'accept: application/json' \
              --header 'authorization: Bearer ${{ secrets.RENDER_GITHUB_ACTION_KEY }}' \
              --silent)
            
            echo "Deploy status response: $STATUS_RESPONSE"
            
            # Extract status from JSON response
            STATUS=$(echo $STATUS_RESPONSE | jq -r '.status // empty' 2>/dev/null || echo "")
            FINISHED_AT=$(echo $STATUS_RESPONSE | jq -r '.finishedAt // empty' 2>/dev/null || echo "")
            
            echo "Current status: $STATUS"
            
            # Check if deploy is finished (either success or failed)
            if [ -n "$FINISHED_AT" ] && [ "$FINISHED_AT" != "null" ]; then
              echo "Deploy completed with status: $STATUS"
              break
            fi
            
            # If status indicates completion
            if [ "$STATUS" = "live" ] || [ "$STATUS" = "failed" ] || [ "$STATUS" = "cancelled" ]; then
              echo "Deploy finished with status: $STATUS"
              break
            fi
            
            ATTEMPT=$((ATTEMPT + 1))
            sleep 30
          done
          
          if [ $ATTEMPT -eq $MAX_ATTEMPTS ]; then
            echo "Deploy status check timed out after $MAX_ATTEMPTS attempts"
            exit 1
          fi
          
          # Export status for next step
          echo "deploy_status=$STATUS" >> $GITHUB_OUTPUT
          echo "DEPLOY_STATUS=$STATUS" >> $GITHUB_ENV
          
      - name: Update deployment status
        uses: actions/github-script@v7
        if: always()
        with:
          script: |
            const status = process.env.DEPLOY_STATUS || 'unknown';
            let state = 'success';
            
            if (status === 'failed' || status === 'cancelled') {
              state = 'failure';
            } else if (status === 'live') {
              state = 'success';
            } else {
              state = 'error';
            }
            
            const { data: deploymentStatus } = await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ steps.deployment.outputs.result }},
              state: state,
              auto_inactive: false
            });
            
            return deploymentStatus;