name: CI & Deploy FastAPI to Render

on:
  push:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Python
        uses: actions/setup-python@v6
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests
        env:
          DATABASE_URL: "sqlite:///./test.db"
        run: |
          pytest tests/ --maxfail=1 --disable-warnings -q

  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    permissions:
      deployments: write
      contents: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        
      - name: Create GitHub Deployment
        id: deployment
        uses: actions/github-script@v7
        with:
          script: |
            const { data: deployment } = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              auto_merge: false,
              required_contexts: [],
              environment: 'Production',
              transient_environment: false,
              production_environment: true
            });
            
            return deployment.id;
          
      - name: Trigger Render Deploy
        id: deploy
        run: |
          DEPLOY_RESPONSE=$(curl -X POST "https://api.render.com/deploy/${{ secrets.RENDER_SERVICE_ID }}?key=${{ secrets.RENDER_API_KEY }}" \
          -H "Accept: application/json" \
          -H "Content-Type: application/json" \
          -w "\n%{http_code}" \
          -s)
          
          HTTP_CODE=$(echo "$DEPLOY_RESPONSE" | tail -n1)
          DEPLOY_BODY=$(echo "$DEPLOY_RESPONSE" | head -n -1)
          
          if [ "$HTTP_CODE" -ne 201 ] && [ "$HTTP_CODE" -ne 200 ]; then
            echo "Deploy trigger failed with status $HTTP_CODE"
            echo "Response: $DEPLOY_BODY"
            exit 1
          fi
          
          DEPLOY_ID=$(echo "$DEPLOY_BODY" | jq -r '.deploy.id // empty')
          if [ -z "$DEPLOY_ID" ]; then
            echo "Failed to extract deploy ID from response"
            echo "Response: $DEPLOY_BODY"
            exit 1
          fi
          
          echo "Deploy triggered successfully with ID: $DEPLOY_ID"
          echo "deploy_id=$DEPLOY_ID" >> $GITHUB_OUTPUT

      - name: Wait for Render Deploy to Complete
        id: deploy-wait
        run: |
          DEPLOY_ID="${{ steps.deploy.outputs.deploy_id }}"
          echo "Waiting for deploy $DEPLOY_ID to complete..."
          
          MAX_ATTEMPTS=60
          ATTEMPT=1
          
          while [ $ATTEMPT -le $MAX_ATTEMPTS ]; do
            echo "Checking deploy status (attempt $ATTEMPT/$MAX_ATTEMPTS)..."
            
            STATUS_RESPONSE=$(curl -X GET "https://api.render.com/v1/services/${{ secrets.RENDER_SERVICE_ID }}/deploys/$DEPLOY_ID" \
            -H "Accept: application/json" \
            -H "Authorization: Bearer ${{ secrets.RENDER_GITHUB_ACTION_KEY }}" \
            -w "\n%{http_code}" \
            -s)
            
            HTTP_CODE=$(echo "$STATUS_RESPONSE" | tail -n1)
            STATUS_BODY=$(echo "$STATUS_RESPONSE" | head -n -1)
            
            if [ "$HTTP_CODE" -ne 200 ]; then
              echo "Failed to check deploy status (HTTP $HTTP_CODE)"
              echo "Response: $STATUS_BODY"
              exit 1
            fi
            
            STATUS=$(echo "$STATUS_BODY" | jq -r '.status // empty')
            FINISHED_AT=$(echo "$STATUS_BODY" | jq -r '.finishedAt // empty')
            
            echo "Deploy status: $STATUS"
            
            if [ "$STATUS" = "live" ]; then
              echo "Deploy completed successfully!"
              echo "deploy_success=true" >> $GITHUB_OUTPUT
              break
            elif [ "$STATUS" = "build_failed" ] || [ "$STATUS" = "update_failed" ] || [ "$STATUS" = "pre_deploy_failed" ] || [ "$STATUS" = "canceled" ] || [ "$STATUS" = "deactivated" ]; then
              echo "Deploy failed with status: $STATUS"
              echo "deploy_success=false" >> $GITHUB_OUTPUT
              exit 1
            elif [ "$STATUS" = "created" ] || [ "$STATUS" = "queued" ] || [ "$STATUS" = "build_in_progress" ] || [ "$STATUS" = "update_in_progress" ] || [ "$STATUS" = "pre_deploy_in_progress" ]; then
              echo "Deploy still in progress..."
            else
              echo "Unknown deploy status: $STATUS"
            fi
            
            if [ $ATTEMPT -eq $MAX_ATTEMPTS ]; then
              echo "Deploy did not complete within timeout"
              echo "deploy_success=false" >> $GITHUB_OUTPUT
              exit 1
            fi
            
            ATTEMPT=$((ATTEMPT + 1))
            sleep 30
          done

      - name: Update deployment status
        uses: actions/github-script@v7
        with:
          script: |
            const deploySuccess = '${{ steps.deploy-wait.outputs.deploy_success }}' === 'true';
            const state = deploySuccess ? 'success' : 'failure';
            
            const { data: status } = await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ steps.deployment.outputs.result }},
              state: state,
              auto_inactive: false
            });
            
            return status;