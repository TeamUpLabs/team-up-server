name: CI & Deploy FastAPI to Render

on:
  push:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Python
        uses: actions/setup-python@v6
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests
        env:
          DATABASE_URL: "sqlite:///./test.db"
        run: |
          pytest tests/ --maxfail=1 --disable-warnings -q

  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    permissions:
      deployments: write
      contents: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        
      - name: Create GitHub Deployment
        id: deployment
        uses: actions/github-script@v7
        with:
          script: |
            const { data: deployment } = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              auto_merge: false,
              required_contexts: [],
              environment: 'Production',
              transient_environment: false,
              production_environment: true
            });
            
            return deployment.id;
          
      - name: Trigger Render Deploy
        id: render-deploy
        run: |
          DEPLOY_RESPONSE=$(curl -s -X POST "https://api.render.com/deploy/${{ secrets.RENDER_SERVICE_ID }}?key=${{ secrets.RENDER_API_KEY }}" \
            -H "Accept: application/json")
          
          echo "Deploy response: $DEPLOY_RESPONSE"
          
          # Extract deploy ID from response
          DEPLOY_ID=$(echo $DEPLOY_RESPONSE | jq -r '.id // empty')
          
          if [ -z "$DEPLOY_ID" ]; then
            echo "Failed to get deploy ID from response"
            exit 1
          fi
          
          echo "deploy_id=$DEPLOY_ID" >> $GITHUB_OUTPUT
          echo "Deploy ID: $DEPLOY_ID"

      - name: Wait for Render Deploy to Complete
        id: wait-for-render-deploy-to-complete
        run: |
          DEPLOY_ID="${{ steps.render-deploy.outputs.deploy_id }}"
          SERVICE_ID="${{ secrets.RENDER_SERVICE_ID }}"
          
          echo "Waiting for deploy $DEPLOY_ID to complete..."
          
          # Poll deploy status every 30 seconds for up to 30 minutes
          for i in {1..60}; do
            echo "Checking deploy status (attempt $i)..."
            
            STATUS_RESPONSE=$(curl -s "https://api.render.com/v1/services/$SERVICE_ID/deploys/$DEPLOY_ID" \
              -H "Authorization: Bearer ${{ secrets.RENDER_GITHUB_ACTION_KEY }}" \
              -H "Accept: application/json")
            
            echo "Status response: $STATUS_RESPONSE"
            
            STATUS=$(echo $STATUS_RESPONSE | jq -r '.status // empty')
            
            if [ -z "$STATUS" ]; then
              echo "Failed to get status from response"
              exit 1
            fi
            
            echo "Current status: $STATUS"
            
            # Check if deploy is complete
            if [[ "$STATUS" == "live" ]] || [[ "$STATUS" == "build_succeeded" ]]; then
              echo "Deploy completed successfully with status: $STATUS"
              echo "deploy_success=true" >> $GITHUB_OUTPUT
              break
            elif [[ "$STATUS" == "failed" ]] || [[ "$STATUS" == "build_failed" ]] || [[ "$STATUS" == "canceled" ]]; then
              echo "Deploy failed with status: $STATUS"
              echo "deploy_success=false" >> $GITHUB_OUTPUT
              exit 1
            elif [[ "$STATUS" == "build_in_progress" ]] || [[ "$STATUS" == "created" ]]; then
              echo "Deploy still in progress, waiting..."
              sleep 30
            else
              echo "Unknown status: $STATUS, waiting..."
              sleep 30
            fi
          done
          
          if [ $i -eq 60 ]; then
            echo "Deploy did not complete within 30 minutes"
            echo "deploy_success=false" >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: Update deployment status
        uses: actions/github-script@v7
        with:
          script: |
            const deploySuccess = '${{ steps.wait-for-render-deploy-to-complete.outputs.deploy_success }}' === 'true';
            const state = deploySuccess ? 'success' : 'failure';
            
            const { data: status } = await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ steps.deployment.outputs.result }},
              state: state,
              auto_inactive: false
            });
            
            return status;