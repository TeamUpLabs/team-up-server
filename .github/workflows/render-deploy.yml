name: CI & Deploy FastAPI to Render

on:
  push:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Python
        uses: actions/setup-python@v6
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests
        env:
          DATABASE_URL: "sqlite:///./test.db"
        run: |
          pytest tests/ --maxfail=1 --disable-warnings -q

  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    permissions:
      deployments: write
      contents: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        
      - name: Create GitHub Deployment
        id: deployment
        uses: actions/github-script@v7
        with:
          script: |
            const { data: deployment } = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              auto_merge: false,
              required_contexts: [],
              environment: 'Production',
              transient_environment: false,
              production_environment: true
            });
            
            return deployment.id;
          
      - name: Trigger Render Deploy
        id: deploy
        run: |
          response=$(curl -s -X POST "https://api.render.com/deploy/${{ secrets.RENDER_SERVICE_ID }}?key=${{ secrets.RENDER_API_KEY }}" \
            -H "Accept: application/json")
          echo "Deployment response: $response"
          DEPLOY_ID=$(echo $response | jq -r '.id')
          echo "Deployment ID: $DEPLOY_ID"
          echo "deploy_id=$DEPLOY_ID" >> $GITHUB_OUTPUT

      - name: Wait for Render deployment to complete
        id: wait-for-deploy
        run: |
          echo "Waiting for deployment to complete..."
          while true; do
            response=$(curl -s -H "Authorization: Bearer ${{ secrets.RENDER_GITHUB_ACTION_KEY }}" \
              "https://api.render.com/v1/services/${{ secrets.RENDER_SERVICE_ID }}/deploys" \
              -H "Accept: application/json")
            
            # Debug: Print the raw response
            echo "Raw API response: $response"
            
            # Get the deployment status from the response
            status=$(echo "$response" | jq -r '.status' 2>/dev/null || echo "")
            
            if [ -z "$status" ]; then
              echo "Error: Could not parse deployment status. Raw response: $response"
              sleep 10
              continue
            fi
            
            echo "Current deployment status: $status"
            
            case "$status" in
              "live" | "deactivated")
                echo "✅ Deployment completed successfully with status: $status"
                break
                ;;
              "build_failed" | "canceled" | "failed" | "inactive" | "killed" | "stopped")
                echo "❌ Deployment failed with status: $status"
                exit 1
                ;;
              *)
                echo "⏳ Deployment in progress. Current status: $status"
                sleep 10
                ;;
            esac
          done

      - name: Update deployment status
        uses: actions/github-script@v7
        with:
          script: |
            const { data: status } = await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ steps.deployment.outputs.result }},
              state: 'success',
              auto_inactive: false,
              environment_url: 'https://${{ secrets.RENDER_SERVICE_ID }}.onrender.com'
            });
            return status;